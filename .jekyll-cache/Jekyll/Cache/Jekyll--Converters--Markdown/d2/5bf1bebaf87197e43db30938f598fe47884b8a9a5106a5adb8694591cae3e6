I"<h1 id="context-switching--mode-switching">Context Switching &amp; Mode Switching</h1>

<h2 id="mode-switching">mode switching</h2>

<p>单个进程来说，从user mode 到kernel mode</p>

<p>中断实现？？</p>

<p>通过system call来实现</p>

<p>而system call则是由软中断实现</p>

<p>实现步骤：</p>

<ul>
  <li>save context(???)</li>
  <li>set the PC to the interrupt handler program</li>
  <li>switch to kernel mode</li>
</ul>

<h2 id="context-switching">context switching</h2>

<p>在两个进程之间切换</p>

<p>场景主要有：</p>

<ul>
  <li>multitask，通过时钟中断来操作</li>
  <li>中断处理</li>
  <li>mode switching</li>
</ul>

<p>步骤：</p>

<ul>
  <li>save context</li>
  <li>update current PCB(Process Control Block)</li>
  <li>move current PCB to an appropriate queue(ready, blocked, ready-suspend)</li>
  <li>select a new process</li>
  <li>update new PCB</li>
  <li>update memory-management data structure(????)</li>
  <li>restore the context of new process</li>
</ul>

<p>System calls in Linux are implemented through software interrupt, that is - switching between user mode to Kernel mode is achieved through interrupt.</p>

<h2 id="三种进程切换的可能">三种进程切换的可能</h2>

<p>外部中断</p>

<p>​	CPU之外的中断，异步，硬中断</p>

<p>​	e.g. 时钟中断，IO完成</p>

<p>内部中断</p>

<p>​	被CPU检查到，trap实现，同步，软中断</p>

<p>​	e.g. memory fault，访问越界</p>

<p>system call</p>

<p>​	自发，trap实现</p>

:ET